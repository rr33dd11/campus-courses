// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using campus.DBContext;

#nullable disable

namespace campus.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("campus.DBContext.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("isStudent")
                        .HasColumnType("boolean");

                    b.Property<bool>("isTeacher")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a08d8946-8bac-45e2-afe3-a0ce7795008a"),
                            BirthDate = new DateTime(2004, 11, 23, 14, 53, 29, 390, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2024, 11, 24, 18, 12, 0, 390, DateTimeKind.Utc),
                            Email = "sanyasigmagucci@example.com",
                            FullName = "Александр Сигмов",
                            Password = "$2a$11$FFJfJPoKTIU/XJBn1bQc5OCnxbV89zkj4Y9c5PnxF20sxObypqmni",
                            isAdmin = true,
                            isStudent = false,
                            isTeacher = true
                        },
                        new
                        {
                            Id = new Guid("31f3d270-9cdc-46e4-a807-0a672ad72a6b"),
                            BirthDate = new DateTime(2005, 11, 23, 14, 53, 29, 390, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2024, 11, 24, 18, 12, 1, 390, DateTimeKind.Utc),
                            Email = "dangerlyonya@example.com",
                            FullName = "Дэнжер Лёня",
                            Password = "$2a$11$tzSMItiH0d5P3hdV5.JJ5eQqHeBAgY7SBt5HrKfThy3QprO04Eh5.",
                            isAdmin = false,
                            isStudent = true,
                            isTeacher = true
                        },
                        new
                        {
                            Id = new Guid("cddc13d6-ce4a-472e-87ca-24b8a10f88e8"),
                            BirthDate = new DateTime(1995, 11, 23, 14, 53, 29, 390, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2024, 11, 24, 18, 12, 2, 390, DateTimeKind.Utc),
                            Email = "lovebackend@example.com",
                            FullName = "Антонио Бекэндрос",
                            Password = "$2a$11$acdEdyPyO584yYRhZtnhCe.CtVyu0Ne2FdWeExLMfrEp/y3pAUE7i",
                            isAdmin = false,
                            isStudent = false,
                            isTeacher = true
                        },
                        new
                        {
                            Id = new Guid("f0ed1390-59f0-4e80-8559-3a7850d47a2f"),
                            BirthDate = new DateTime(2006, 10, 1, 14, 53, 29, 390, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2024, 11, 24, 18, 12, 3, 390, DateTimeKind.Utc),
                            Email = "beerlesha@example.com",
                            FullName = "Леша Подпивнов 228",
                            Password = "$2a$11$Ihv6krc.4HJ.5by1hC2qOe7KG7NP8Qw3n3lgvMEOw7MIpK4qaUHTC",
                            isAdmin = false,
                            isStudent = true,
                            isTeacher = false
                        },
                        new
                        {
                            Id = new Guid("0572342d-fde4-48f6-a754-350a15edbcc0"),
                            BirthDate = new DateTime(2005, 6, 17, 14, 53, 29, 390, DateTimeKind.Utc),
                            CreatedDate = new DateTime(2024, 11, 24, 18, 12, 4, 390, DateTimeKind.Utc),
                            Email = "yanepashka@example.com",
                            FullName = "Пашка",
                            Password = "$2a$11$LpRIy5FmkONerK2u6A.sxOe2/jdhrIp5R6g6tCe.PYc0TVcZ8P6S2",
                            isAdmin = false,
                            isStudent = true,
                            isTeacher = false
                        });
                });

            modelBuilder.Entity("campus.DBContext.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Annotations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaximumStudentsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RemainingSlotsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<int>("StartYear")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5c75cec-b93e-42fb-9725-7f4aaf57dd28"),
                            Annotations = "Энтити фрамерворк рулит",
                            CreatedDate = new DateTime(2023, 11, 24, 18, 12, 10, 390, DateTimeKind.Utc),
                            GroupId = new Guid("4fe8a005-f169-45f8-adbd-1e5fe1d7af50"),
                            MaximumStudentsCount = 10,
                            Name = "ASPNET",
                            RemainingSlotsCount = 9,
                            Requirements = "Сдать хотя бы с 4го раза",
                            Semester = 1,
                            StartYear = 2025,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("cce72df6-7f8f-4fea-a36a-25875849c1a6"),
                            Annotations = "Какая-то аннотация",
                            CreatedDate = new DateTime(2023, 11, 24, 18, 12, 11, 390, DateTimeKind.Utc),
                            GroupId = new Guid("4fe8a005-f169-45f8-adbd-1e5fe1d7af50"),
                            MaximumStudentsCount = 5,
                            Name = "PHP",
                            RemainingSlotsCount = 4,
                            Requirements = "Какие-то требования",
                            Semester = 0,
                            StartYear = 2024,
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("4288c2aa-c310-41a3-b2d8-04a8a970504d"),
                            Annotations = "Будем кнопки красить",
                            CreatedDate = new DateTime(2023, 11, 24, 18, 12, 12, 390, DateTimeKind.Utc),
                            GroupId = new Guid("7a4ca155-ada6-47e4-b9d0-f2d4b6467039"),
                            MaximumStudentsCount = 2,
                            Name = "React",
                            RemainingSlotsCount = 0,
                            Requirements = "Красивые отступы",
                            Semester = 0,
                            StartYear = 2023,
                            Status = 3
                        });
                });

            modelBuilder.Entity("campus.DBContext.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fe8a005-f169-45f8-adbd-1e5fe1d7af50"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Backend"
                        },
                        new
                        {
                            Id = new Guid("7a4ca155-ada6-47e4-b9d0-f2d4b6467039"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Frontend"
                        });
                });

            modelBuilder.Entity("campus.DBContext.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53e410fe-df1d-423b-86c5-84a75e113506"),
                            CourseId = new Guid("d5c75cec-b93e-42fb-9725-7f4aaf57dd28"),
                            CreatedDate = new DateTime(2024, 11, 24, 18, 13, 10, 390, DateTimeKind.Utc),
                            IsImportant = true,
                            Text = "Анекдот"
                        },
                        new
                        {
                            Id = new Guid("5b88985c-c0c2-4820-87cc-d7f954fdbfd1"),
                            CourseId = new Guid("d5c75cec-b93e-42fb-9725-7f4aaf57dd28"),
                            CreatedDate = new DateTime(2024, 11, 24, 18, 13, 11, 390, DateTimeKind.Utc),
                            IsImportant = false,
                            Text = "Купается одетый мужик в речке"
                        },
                        new
                        {
                            Id = new Guid("3ef63582-42af-41a8-bfb9-268681f24934"),
                            CourseId = new Guid("d5c75cec-b93e-42fb-9725-7f4aaf57dd28"),
                            CreatedDate = new DateTime(2024, 11, 24, 18, 13, 12, 390, DateTimeKind.Utc),
                            IsImportant = false,
                            Text = "Ему говорят, мол мужик что ты в одежде купаешься?"
                        },
                        new
                        {
                            Id = new Guid("1be6757b-5096-4a73-a8b1-5552b6c09931"),
                            CourseId = new Guid("d5c75cec-b93e-42fb-9725-7f4aaf57dd28"),
                            CreatedDate = new DateTime(2024, 11, 24, 18, 13, 13, 390, DateTimeKind.Utc),
                            IsImportant = false,
                            Text = "Он отвечает, а я ее стираю"
                        },
                        new
                        {
                            Id = new Guid("10d28aa7-7e7f-419c-84c2-ea8601233094"),
                            CourseId = new Guid("d5c75cec-b93e-42fb-9725-7f4aaf57dd28"),
                            CreatedDate = new DateTime(2024, 11, 24, 18, 13, 14, 390, DateTimeKind.Utc),
                            IsImportant = false,
                            Text = "У него спрашивают, а что не в в машинке не стираешь?"
                        },
                        new
                        {
                            Id = new Guid("ab00d7de-8c63-487d-a1da-417e6b994c0f"),
                            CourseId = new Guid("d5c75cec-b93e-42fb-9725-7f4aaf57dd28"),
                            CreatedDate = new DateTime(2024, 11, 24, 18, 13, 15, 390, DateTimeKind.Utc),
                            IsImportant = false,
                            Text = "А он говорит: меня в ней укачивает"
                        });
                });

            modelBuilder.Entity("campus.DBContext.Models.Student", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<int>("FinalResult")
                        .HasColumnType("integer");

                    b.Property<int>("MidtermResult")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("AccountId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("31f3d270-9cdc-46e4-a807-0a672ad72a6b"),
                            CourseId = new Guid("4288c2aa-c310-41a3-b2d8-04a8a970504d"),
                            FinalResult = 1,
                            MidtermResult = 1,
                            Status = 1
                        },
                        new
                        {
                            AccountId = new Guid("f0ed1390-59f0-4e80-8559-3a7850d47a2f"),
                            CourseId = new Guid("4288c2aa-c310-41a3-b2d8-04a8a970504d"),
                            FinalResult = 2,
                            MidtermResult = 2,
                            Status = 1
                        },
                        new
                        {
                            AccountId = new Guid("f0ed1390-59f0-4e80-8559-3a7850d47a2f"),
                            CourseId = new Guid("cce72df6-7f8f-4fea-a36a-25875849c1a6"),
                            FinalResult = 0,
                            MidtermResult = 0,
                            Status = 2
                        },
                        new
                        {
                            AccountId = new Guid("0572342d-fde4-48f6-a754-350a15edbcc0"),
                            CourseId = new Guid("cce72df6-7f8f-4fea-a36a-25875849c1a6"),
                            FinalResult = 0,
                            MidtermResult = 0,
                            Status = 1
                        },
                        new
                        {
                            AccountId = new Guid("0572342d-fde4-48f6-a754-350a15edbcc0"),
                            CourseId = new Guid("d5c75cec-b93e-42fb-9725-7f4aaf57dd28"),
                            FinalResult = 0,
                            MidtermResult = 0,
                            Status = 0
                        },
                        new
                        {
                            AccountId = new Guid("f0ed1390-59f0-4e80-8559-3a7850d47a2f"),
                            CourseId = new Guid("d5c75cec-b93e-42fb-9725-7f4aaf57dd28"),
                            FinalResult = 0,
                            MidtermResult = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("campus.DBContext.Models.Teacher", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.HasKey("AccountId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("a08d8946-8bac-45e2-afe3-a0ce7795008a"),
                            CourseId = new Guid("4288c2aa-c310-41a3-b2d8-04a8a970504d"),
                            IsMain = true
                        },
                        new
                        {
                            AccountId = new Guid("cddc13d6-ce4a-472e-87ca-24b8a10f88e8"),
                            CourseId = new Guid("d5c75cec-b93e-42fb-9725-7f4aaf57dd28"),
                            IsMain = true
                        },
                        new
                        {
                            AccountId = new Guid("cddc13d6-ce4a-472e-87ca-24b8a10f88e8"),
                            CourseId = new Guid("cce72df6-7f8f-4fea-a36a-25875849c1a6"),
                            IsMain = true
                        },
                        new
                        {
                            AccountId = new Guid("31f3d270-9cdc-46e4-a807-0a672ad72a6b"),
                            CourseId = new Guid("d5c75cec-b93e-42fb-9725-7f4aaf57dd28"),
                            IsMain = false
                        });
                });

            modelBuilder.Entity("campus.DBContext.Models.Course", b =>
                {
                    b.HasOne("campus.DBContext.Models.Group", "Group")
                        .WithMany("Courses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("campus.DBContext.Models.Notification", b =>
                {
                    b.HasOne("campus.DBContext.Models.Course", "Course")
                        .WithMany("Notifications")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("campus.DBContext.Models.Student", b =>
                {
                    b.HasOne("campus.DBContext.Models.Account", "Account")
                        .WithMany("MyCourses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("campus.DBContext.Models.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("campus.DBContext.Models.Teacher", b =>
                {
                    b.HasOne("campus.DBContext.Models.Account", "Account")
                        .WithMany("TeachingCourses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("campus.DBContext.Models.Course", "Course")
                        .WithMany("Teachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("campus.DBContext.Models.Account", b =>
                {
                    b.Navigation("MyCourses");

                    b.Navigation("TeachingCourses");
                });

            modelBuilder.Entity("campus.DBContext.Models.Course", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("campus.DBContext.Models.Group", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
